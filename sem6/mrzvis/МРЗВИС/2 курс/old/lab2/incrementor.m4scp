m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: incrementor.m4scp
// Description: counter incrementing
///////////////////////////////////////////////////////
//      Author: IVP
//        Date: 31.07.2013
//    Location: /lib/number/incrementor
// Output parameters:	1	-	state
//			2	-	true
//			3	-	history
// Input parameters:	3	-	history
//			4	-	parameters = (counter, ...)
//			5	-	logging
// Execution input time complexity:	constant, logging dependable
// Execution output time complexity:	logging dependable
// Execution input space complexity:	constant, logging dependable
// Execution output space complexity:	logging dependable
])

procedure(number_incrementor,
M4SCS(	[[
		enter_message = /"number_incrementor: entering\n"/,
		leave_message = /"number_incrementor: leaving\n"/,
		chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",
		log_get = "/lib/log/get/log_get";
		unit =n= 1;
		prm1,lp1,lp2]])
M4SEC(	[[	chain_get_next_singlet = /../chain/get_next[SYFIX]/chain_get_next_singlet,
		log_get = /../log/get[SYFIX]/log_get,
		unit = n/1/,		
		prm1,lp1,lp2]]),
	[{
		counter,
		data,
		link,
		value,
		origin, 
		state,
		true,
		history,
		parameters,
		logging,
		dogger,
		logger,
		log,
		descr}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: history, 
		4_: in_: parameters,
		5_: in_: logging
	]}) 

DBG(M4SCS(print([1_: fixed_: enter_message])))

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm1 = [{1_: parameters, 2_: link, 3_: counter}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

ifVarAssign([1_: link],,final)

add([	1_: fixed_: counter,
	2_: fixed_: counter,
	3_: fixed_: unit])

call([	1_: fixed_: log_get,
	2_: fixed_: lp1 = [{1_: logging, 2_: logger, 3_: log, 4_: data}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

ifVarAssign([1_: logger],,final)
genElStr3([ 
	1_: assign_: node_: const_: data, 
	2_: assign_: arc_: actual_: temporary_: pos_: const_: link, 
	3_: fixed_: counter])

call([	1_: fixed_: logger,
	2_: fixed_: lp2 = [{1_: log, 2_: data}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

eraseEl([1_: fixed_: f_: data])

label(final)
DBG(M4SCS(print([1_: fixed_: leave_message])))

return()
end()