m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: strategy_simple.m4scp
// Description: simple implementation of strategy routine
///////////////////////////////////////////////////////
//      Author: Yalchyk Ilya
//        Date: 22.12.2013
//    Location: /lib/chain_logic_formula/strategy_simple
// Output parameters:	1	-	state
//			2	-	true
//			3	-	stack
// Input parameters:	3	-	stack = (formula, ...)
//			4	-	parameters
//			5	-	logging
// Execution input time complexity:	constant, logging dependable
// Execution output time complexity:	logging dependable
// Execution input space complexity:	constant, logging dependable
// Execution output space complexity:	logging dependable
])

procedure(chain_logic_formula_strategy_simple,
M4SCS(	[[
		enter_message = /"chain_logic_formula_strategy_simple: entering\n"/,
		leave_message = /"chain_logic_formula_strategy_simple: leaving\n"/,
	
		chain_get_next = "/lib/chain/get_next/chain_get_next",
		prmg1
	]]),
	[{
		state, true, stack, parameters, logging, link, descr, formula
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: stack, 
		4_: in_: parameters,
		5_: in_: logging
	]}) 

DBG(M4SCS(print([1_: fixed_: enter_message])))

call([1_: fixed_: chain_get_next, 2_: fixed_: prmg1 = [{1_: stack, 2_: link, 3_: formula}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

M4SCS(
	printEl([1_: fixed_: formula])
)

varAssign([
	1_: assign_: state,
	2_: fixed_: true
])

DBG(M4SCS(print([1_: fixed_: leave_message])))

return()
end()